{"version":3,"sources":["Register.js","Patient-Doctor/Document.js","Patient-Doctor/MedicalProcess.js","Patient-Doctor/Documentation.js","Patient-Doctor/Recommendations.js","Patient-Doctor/SideBar.js","Patient-Doctor/Report.js","Patient-Doctor/PatientPage.js","DateParser.js","Patient-Doctor/Doctor/NewDocument.js","Patient-Doctor/Doctor/NewRecommendation.js","Patient-Doctor/Doctor/NewAttachment.js","Patient-Doctor/Doctor/DoctorPage.js","LabTechnician/LabTechnicianPage.js","Main.js","App.js","index.js"],"names":["Register","state","accountType","generatedLogin","chooseAccountType","e","_this","setState","target","value","goBack","props","history","push","validatePassword","password","document","getElementById","confirmPassword","setCustomValidity","registerUser","_callee","regenerator_default","a","wrap","_context","prev","next","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","name","surname","pesel","PWZ","specialization","then","result","json","data","login","sessionStorage","setItem","dob","sex","address","stop","react_default","createElement","className","onClick","this","onSubmit","onChange","htmlFor","type","required","id","pattern","Fragment","Component","Document","documents","patients","_this2","currentDocument","currentPatient","_this3","length","forEach","_id","match","params","documentId","console","log","react_router_dom","to","style","fontWeight","title","includes","testDate","orderingDoctor","performingDoctor","describingDoctor","content","issueDate","labTechnician","border","results","map","item","i","key","range","unit","handleClick","filePatient","File","FileSaver","saveAs","fileResults","MedicalProcess","tasks","editMode","editTask","Object","toConsumableArray","index","indexOf","concat","activeAccount","addTask","placeholder","filter","task","completed","defaultValue","setCompleted","details","date","Documentation","compare","b","dateA","parseInt","split","join","dateB","filterResults","fromDate","toDate","tag","filtered","tags","documentType","sort","height","textDecoration","Recommendations","recommendations","activeUser","recommendation","color","doctor","background","attachedDocuments","attachment","margin","SideBar","patient","editData","querySelector","PESEL","telephone","icd10","expandPatientInfo","classList","toggle","expandTasks","age","dateOfBirth","checked","toggleComplete","disabled","Raport","parameters","chosenParameter","filteredResults","chooseResultType","labResult","some","parameter","find","PatientPage","patientID","isCompleted","response","Patient_Doctor_SideBar","activeClassName","react_router","exact","path","component","render","Patient_Doctor_MedicalProcess","assign","Report","from","transformDate","day","getDate","toString","month","getMonth","year","getYear","today","Date","threeDaysAgo","now","NewDocument","hour","getHours","minutes","getMinutes","transformDateTime","chooseDocumentType","createDocument","region","textAlign","width","min","max","multiple","NewRecommendation","dataSaved","parse","getItem","attachments","toggleSave","_e$target$parentEleme","parentElement","submitRecommendation","removeItem","NewAttachment","submitAttachment","attachedDocument","_e$target","startDate","_e$target2","medicine","payment","_e$target3","placeOfWork","endDate","_e$target4","place","examination","diagnosis","aim","checkboxes","labTests","t0","abrupt","test","checkbox","DoctorPage","mode","Access-Control-Allow-Origin","addTaskFromSideBar","_callee2","_context2","_callee3","_context3","searchPatient","_callee4","_context4","Doctor_NewAttachment","Patient_Doctor_Documentation","Patient_Doctor_Recommendations","LabTechnicianPage","resultType","addParameter","newParameter","submitResult","collectionDate","labPatientID","window","location","reload","testType","Main","isLoggedIn","changeAccount","logIn","innerHTML","logOut","infoText","Patient_Doctor_PatientPage","Doctor_DoctorPage","LabTechnician_LabTechnicianPage","App","ReactDOM","basename","process","src_App"],"mappings":"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","file":"static/js/main.b428f696.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n/* import { withRouter } from 'react-router-dom'; */\r\n//import { history } from 'react-router-dom';\r\n\r\nclass Register extends Component {\r\n  state = {\r\n    accountType: \"patient\",\r\n    generatedLogin: \"\"\r\n  };\r\n\r\n  chooseAccountType = e => {\r\n    this.setState({ accountType: e.target.value });\r\n  };\r\n\r\n  goBack = () => {\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  validatePassword = () => {\r\n    let password = document.getElementById(\"password\");\r\n    let confirmPassword = document.getElementById(\"confirm-password\");\r\n\r\n    if (password.value !== confirmPassword.value) {\r\n      confirmPassword.setCustomValidity(\"Hasła nie są jednakowe\");\r\n    } else {\r\n      confirmPassword.setCustomValidity(\"\");\r\n    }\r\n  };\r\n\r\n  registerUser = async e => {\r\n    e.preventDefault();\r\n    if (this.state.accountType === \"doctor\") {\r\n      await fetch(\"https://medical-documentation.herokuapp.com/register\", {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          accountType: this.state.accountType,\r\n          name: e.target.name.value,\r\n          surname: e.target.surname.value,\r\n          pesel: e.target.pesel.value,\r\n          PWZ: e.target.PWZ.value,\r\n          specialization: e.target.specialization.value,\r\n          password: e.target.password.value\r\n        })\r\n      })\r\n        .then(result => result.json())\r\n        .then(data => {\r\n          this.setState({ generatedLogin: data.login });\r\n        });\r\n      await sessionStorage.setItem(\"generatedLogin\", this.state.generatedLogin);\r\n    } else {\r\n      await fetch(\"https://medical-documentation.herokuapp.com/register\", {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          accountType: this.state.accountType,\r\n          name: e.target.name.value,\r\n          surname: e.target.surname.value,\r\n          pesel: e.target.pesel.value,\r\n          dob: e.target.dob.value,\r\n          sex: e.target.sex.value,\r\n          address: e.target.address.value,\r\n          password: e.target.password.value\r\n        })\r\n      })\r\n        .then(result => result.json())\r\n        .then(data => {\r\n          this.setState({ generatedLogin: data.login });\r\n        });\r\n      await sessionStorage.setItem(\"generatedLogin\", this.state.generatedLogin);\r\n    }\r\n    this.props.history.push(\"/\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"register-container\">\r\n        <h2>Zarejestruj się</h2>\r\n        <button className=\"backButton\" onClick={this.goBack}>\r\n          Powrót do logowania\r\n        </button>\r\n        <form onSubmit={this.registerUser}>\r\n          <span>\r\n            <label>Typ konta: </label>\r\n            <select name=\"accountType\" onChange={this.chooseAccountType}>\r\n              <option value=\"patient\">Pacjent</option>\r\n              <option value=\"doctor\">Lekarz</option>\r\n              <option value=\"lab\">Laborant</option>\r\n            </select>\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"name\">Imię </label>\r\n            <input type=\"text\" name=\"name\" required />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"surname\">Nazwisko </label>\r\n            <input type=\"text\" name=\"surname\" required />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"surname\">Płeć </label>\r\n            <input type=\"text\" name=\"sex\" required />\r\n          </span>\r\n          {this.state.accountType !== \"doctor\" && (\r\n            <span>\r\n              <label htmlFor=\"dob\">Data urodzenia </label>\r\n              <input type=\"date\" name=\"dob\" required />\r\n            </span>\r\n          )}\r\n          <span>\r\n            <label htmlFor=\"pesel\">PESEL </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"pesel\"\r\n              id=\"pesel\"\r\n              required\r\n              pattern=\"[0-9]{11}\"\r\n            />\r\n          </span>\r\n          {this.state.accountType === \"doctor\" && (\r\n            <>\r\n              {\" \"}\r\n              <span>\r\n                <label>Numer PWZ</label>\r\n                <input type=\"text\" name=\"PWZ\" required />\r\n              </span>\r\n              <span>\r\n                <label>Specjalizacja</label>\r\n                <input type=\"text\" name=\"specialization\" required />\r\n              </span>\r\n            </>\r\n          )}\r\n          {this.state.accountType !== \"doctor\" && (\r\n            <span>\r\n              <label htmlFor=\"surname\">Adres </label>\r\n              <input type=\"text\" name=\"address\" required />\r\n            </span>\r\n          )}\r\n          <span>\r\n            <label htmlFor=\"password\">Hasło </label>\r\n            <input\r\n              type=\"password\"\r\n              required\r\n              id=\"password\"\r\n              //pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,12}$\"\r\n            />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"password\">Powtórz hasło </label>\r\n            <input\r\n              type=\"password\"\r\n              required\r\n              id=\"confirm-password\"\r\n              //pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,12}$\"\r\n              onChange={this.validatePassword}\r\n            />\r\n          </span>\r\n          <input type=\"submit\" value=\"Zarejestruj się\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../css/Document.css\";\r\nimport FileSaver from \"file-saver\";\r\n\r\nclass Document extends Component {\r\n  state = {\r\n    documents: [],\r\n    patients: []\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await fetch(\"https://medical-documentation.herokuapp.com/documentation\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ documents: data }));\r\n    await fetch(\"https://medical-documentation.herokuapp.com/patient\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ patients: data }));\r\n  }\r\n\r\n  render() {\r\n    if (this.state.documents.length && this.state.patients) {\r\n      let currentDocument;\r\n      this.state.documents.forEach(document => {\r\n        if (document._id === this.props.match.params.documentId) {\r\n          currentDocument = document;\r\n        }\r\n      });\r\n\r\n      let currentPatient;\r\n      currentPatient = this.state.patients;\r\n      /*this.state.patients.forEach(document => {\r\n\t\t  alert(document.patientID + \" \" + currentDocument.patientID);\r\n        if (document.patientID === currentDocument.patientID) {\r\n          currentPatient = document;\r\n        }\r\n      });*/\r\n\r\n      console.log(currentDocument);\r\n      return (\r\n        <div className=\"container document-container\">\r\n          <Link to=\"/documentation\" className=\"backButton\">\r\n            <button>Powrót</button>\r\n          </Link>\r\n          <p style={{ fontWeight: \"700\" }}>{currentDocument.title}</p>\r\n          {!currentDocument.title.includes(\"Badanie krwi\") && (\r\n            <div className=\"result-info\">\r\n              <p>Data: {currentDocument.testDate}</p>\r\n              <p>Lekarz zlecający: {currentDocument.orderingDoctor}</p>\r\n              <p>Lekarz wykonujący: {currentDocument.performingDoctor}</p>\r\n              <p>Lekarz opisujący: {currentDocument.describingDoctor}</p>\r\n              <p>\r\n                <br />\r\n                {currentDocument.content}\r\n              </p>\r\n            </div>\r\n          )}\r\n          {currentDocument.title.includes(\"Badanie krwi\") && (\r\n            <div className=\"table\">\r\n              <div className=\"result-info\">\r\n                <p>Data pobrania: {currentDocument.testDate} </p>\r\n                <p>Data wydania: {currentDocument.issueDate}</p>\r\n                <p>Lekarz zlecający: {currentDocument.orderingDoctor}</p>\r\n                <p>Laborant: {currentDocument.labTechnician}</p>\r\n              </div>\r\n              <table border=\"1\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"mobile-out\">Lp.</th>\r\n                    <th>Parametr</th>\r\n                    <th>Wartość</th>\r\n                    <th>Zakres</th>\r\n                    <th>Jednostka</th>\r\n                  </tr>\r\n                </thead>\r\n                {currentDocument.results.map((item, i) => {\r\n                  return (\r\n                    <tbody key={i}>\r\n                      <tr>\r\n                        <td className=\"mobile-out\">{i + 1}</td>\r\n                        <td>{currentDocument.results[i].name}</td>\r\n                        <td>{currentDocument.results[i].value}</td>\r\n                        <td>{currentDocument.results[i].range}</td>\r\n                        <td>{currentDocument.results[i].unit}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  );\r\n                })}\r\n              </table>\r\n            </div>\r\n          )}\r\n\r\n          <button\r\n            onClick={() => this.handleClick(currentDocument, currentPatient)}\r\n          >\r\n            Zapisz do PDF\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  handleClick(currentDocument, currentPatient) {\r\n    //const FileSaver = require('file-saver');\r\n    const filePatient = new File(\r\n      [JSON.stringify(currentPatient)],\r\n      \"patient.json\",\r\n      { type: \"text/plain;charset=utf-8\" }\r\n    );\r\n    FileSaver.saveAs(filePatient);\r\n    const fileResults = new File(\r\n      [JSON.stringify(currentDocument)],\r\n      \"results.json\",\r\n      { type: \"text/plain;charset=utf-8\" }\r\n    );\r\n    FileSaver.saveAs(fileResults);\r\n  }\r\n}\r\n\r\nexport default Document;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"../css/MedicalProcess.css\";\r\nimport \"../css/App.css\";\r\n\r\nclass MedicalProcess extends Component {\r\n  state = {\r\n    tasks: [],\r\n    editMode: []\r\n  };\r\n\r\n  editMode = e => {\r\n    const id = e.target.id;\r\n    if (!this.state.editMode.includes(id)) {\r\n      const editMode = [...this.state.editMode, id];\r\n      this.setState({ editMode });\r\n    } else {\r\n      //dodanie do bazy\r\n      this.props.editTask(id);\r\n      //usunięcie z tablicy editMode\r\n      let editMode = [...this.state.editMode];\r\n      const index = editMode.indexOf(id);\r\n      delete editMode[index];\r\n      this.setState({ editMode });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container medical-process-container\">\r\n        {this.props.activeAccount === \"doctor\" && (\r\n          <form onSubmit={this.props.addTask}>\r\n            <input type=\"text\" placeholder=\"Tytuł\" name=\"title\" />\r\n            <select name=\"completed\">\r\n              <option value=\"done\">Wykonane</option>\r\n              <option value=\"todo\">Do zrobienia</option>\r\n            </select>\r\n            <p>Data:</p>\r\n            <input type=\"datetime-local\" name=\"date\" placeholder=\"date\" />\r\n            <textarea placeholder=\"Szczegóły\" name=\"details\" />\r\n            <input type=\"submit\" value=\"Dodaj zadanie\" />\r\n          </form>\r\n        )}\r\n        <div className=\"content\">\r\n          <h3>Do zrobienia</h3>\r\n          <ul>\r\n            {this.props.tasks\r\n              .filter(task => task.completed === false)\r\n              .map((task, i) => {\r\n                return (\r\n                  <li key={i}>\r\n                    <span className=\"task-header\">\r\n                      <strong>\r\n                        {this.state.editMode.includes(task._id) ? (\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"title\"\r\n                            id=\"title\"\r\n                            defaultValue={task.title}\r\n                          />\r\n                        ) : (\r\n                          task.title\r\n                        )}\r\n                      </strong>\r\n                      {this.props.activeAccount === \"doctor\" && (\r\n                        <button\r\n                          className=\"set-done\"\r\n                          id={task._id}\r\n                          onClick={this.props.setCompleted}\r\n                        >\r\n                          ✓\r\n                        </button>\r\n                      )}\r\n\r\n                      <button\r\n                        className=\"edit\"\r\n                        onClick={this.editMode}\r\n                        id={task._id}\r\n                      >\r\n                        🖉\r\n                      </button>\r\n                    </span>\r\n\r\n                    <div className=\"task-info\">\r\n                      {this.state.editMode.includes(task._id) ? (\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"details\"\r\n                          id=\"details\"\r\n                          defaultValue={task.details}\r\n                          placeholder=\"Szczegóły\"\r\n                        />\r\n                      ) : (\r\n                        <p>{task.details}</p>\r\n                      )}\r\n\r\n                      {this.state.editMode.includes(task._id) ? (\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"date\"\r\n                          id=\"date\"\r\n                          defaultValue={task.date}\r\n                          placeholder=\"Data\"\r\n                        />\r\n                      ) : (\r\n                        <p>{task.date}</p>\r\n                      )}\r\n                    </div>\r\n                  </li>\r\n                );\r\n              })}\r\n          </ul>\r\n          <hr />\r\n          <h3>Wykonane</h3>\r\n          <ul>\r\n            {this.props.tasks\r\n              .filter(task => task.completed === true)\r\n              .map((task, i) => {\r\n                return (\r\n                  <li key={i}>\r\n                    <span className=\"task-header\">\r\n                      <strong>\r\n                        {this.state.editMode.includes(task._id) ? (\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"title\"\r\n                            id=\"title\"\r\n                            defaultValue={task.title}\r\n                          />\r\n                        ) : (\r\n                          task.title\r\n                        )}\r\n                      </strong>\r\n                      <button\r\n                        className=\"edit\"\r\n                        onClick={this.editMode}\r\n                        id={task._id}\r\n                      >\r\n                        🖉\r\n                      </button>\r\n                    </span>\r\n\r\n                    <div className=\"task-info\">\r\n                      {this.state.editMode.includes(task._id) ? (\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"details\"\r\n                          id=\"details\"\r\n                          defaultValue={task.details}\r\n                          placeholder=\"Szczegóły\"\r\n                        />\r\n                      ) : (\r\n                        <p>{task.details}</p>\r\n                      )}\r\n\r\n                      {this.state.editMode.includes(task._id) ? (\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"date\"\r\n                          id=\"date\"\r\n                          defaultValue={task.date}\r\n                          placeholder=\"Data\"\r\n                        />\r\n                      ) : (\r\n                        <p>{task.date}</p>\r\n                      )}\r\n                    </div>\r\n                  </li>\r\n                );\r\n              })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MedicalProcess;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/Documentation.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Documentation extends Component {\r\n  state = {\r\n    documents: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://medical-documentation.herokuapp.com/documentation\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ documents: data.sort(this.compare) }));\r\n  }\r\n\r\n  compare = (a, b) => {\r\n    const dateA = parseInt(\r\n      a.testDate\r\n        .split(\" \")[0]\r\n        .split(\"-\")\r\n        .join(\"\")\r\n    );\r\n    const dateB = parseInt(\r\n      b.testDate\r\n        .split(\" \")[0]\r\n        .split(\"-\")\r\n        .join(\"\")\r\n    );\r\n    return dateA > dateB ? -1 : dateA < dateB ? 1 : 0;\r\n  };\r\n\r\n  filterResults = async e => {\r\n    e.preventDefault();\r\n    const fromDate =\r\n      parseInt(e.target.fromDate.value.split(\"-\").join(\"\")) || null;\r\n    const toDate = parseInt(e.target.toDate.value.split(\"-\").join(\"\")) || null;\r\n    const tag = e.target.tags.value;\r\n    await fetch(\"https://medical-documentation.herokuapp.com/documentation\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ documents: data }));\r\n\r\n    console.log(fromDate, toDate);\r\n    const filtered = this.state.documents\r\n      .filter(document => {\r\n        if (tag !== \"all\") {\r\n          return document.documentType === tag;\r\n        } else {\r\n          return true;\r\n        }\r\n      })\r\n      .filter(document => {\r\n        if (fromDate && toDate) {\r\n          return (\r\n            parseInt(\r\n              document.date\r\n                .split(\" \")[0]\r\n                .split(\"-\")\r\n                .join(\"\")\r\n            ) >= fromDate &&\r\n            parseInt(\r\n              document.date\r\n                .split(\" \")[0]\r\n                .split(\"-\")\r\n                .join(\"\")\r\n            ) <= toDate\r\n          );\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n\r\n    this.setState({ documents: filtered });\r\n  };\r\n\r\n  render() {\r\n    //const height = this.props.activeAccount === \"doctor\" ? \"41vh\" : \"55vh\";\r\n    return (\r\n      <div className=\"container documentation-container\">\r\n        <div className=\"buttons\">\r\n          {this.props.activeAccount === \"doctor\" && (\r\n            <Link to=\"documentation/create-new\">\r\n              <button>Dodaj wynik badania</button>\r\n            </Link>\r\n          )}\r\n          <Link to=\"documentation/report\">\r\n            <button>Wygeneruj raport</button>\r\n          </Link>\r\n        </div>\r\n        <form className=\"filterForm\" onSubmit={this.filterResults}>\r\n          <label>\r\n            Filtruj po tagu:{\" \"}\r\n            <select name=\"tags\">\r\n              <option value=\"all\">Wszystko</option>\r\n              <option value=\"Badanie krwi\">Badanie krwi</option>\r\n              <option value=\"Badanie USG\">Badanie USG</option>\r\n              <option value=\"Badanie EKG\">Badanie EKG</option>\r\n              <option value=\"Echokardiografia\">Echokardiografia</option>\r\n              <option value=\"Tomografia komputerowa\">\r\n                Tomografia komputerowa\r\n              </option>\r\n              <option value=\"Rezonans magnetyczny\">Rezonans magnetyczny</option>\r\n              <option value=\"Angiografia\">Angiografia / Koronarografia</option>\r\n            </select>\r\n          </label>\r\n          <label id=\"dateFilter\">\r\n            <p>Filtruj po dacie: </p>\r\n\r\n            <p>\r\n              {\" \"}\r\n              od\r\n              <input type=\"date\" name=\"fromDate\" /> do\r\n              <input type=\"date\" name=\"toDate\" />\r\n            </p>\r\n          </label>\r\n          <input type=\"submit\" value=\"Filtruj\" />\r\n        </form>\r\n        <div className=\"documents content\" style={{ height: \"41vh\" }}>\r\n          <ul>\r\n            {this.state.documents.map((document, i) => {\r\n              return (\r\n                <li key={i}>\r\n                  <Link\r\n                    style={{ fontWeight: \"600\", textDecoration: \"underline\" }}\r\n                    to={`/documentation/document${document._id}`}\r\n                  >\r\n                    {document.title}\r\n                  </Link>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Documentation;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/Recommendations.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Recommendations extends Component {\r\n  state = {\r\n    recommendations: [],\r\n    activeUser: []\r\n  };\r\n  /*https://medical-documentation.herokuapp.com*/\r\n  componentWillMount() {\r\n    fetch(\"https://medical-documentation.herokuapp.com/recommendations\")\r\n      .then(result => result.json())\r\n      .then(data =>\r\n        this.setState({ recommendations: data.sort(this.compare) })\r\n      );\r\n\r\n    fetch(\"https://medical-documentation.herokuapp.com/active-user\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ activeUser: data }));\r\n  }\r\n\r\n  compare = (a, b) => {\r\n    const dateA = parseInt(\r\n      a.date\r\n        .split(\" \")[0]\r\n        .split(\"-\")\r\n        .join(\"\")\r\n    );\r\n    const dateB = parseInt(\r\n      b.date\r\n        .split(\" \")[0]\r\n        .split(\"-\")\r\n        .join(\"\")\r\n    );\r\n    return dateA > dateB ? -1 : dateA < dateB ? 1 : 0;\r\n  };\r\n  render() {\r\n    //const height = this.props.activeAccount === \"doctor\" ? \"50vh\" : \"65vh\";\r\n    return (\r\n      <div className=\"container recommendations-container\">\r\n        {this.props.activeAccount === \"doctor\" && (\r\n          <Link to=\"/recommendations/create-new\">\r\n            <button>Dodaj zalecenie</button>\r\n          </Link>\r\n        )}\r\n\r\n        <div className=\"content\" /*style={{ height: height }}*/>\r\n          {this.state.recommendations.map((recommendation, i) => {\r\n            const color =\r\n              recommendation.doctor === this.state.activeUser.name\r\n                ? \"rgb(138, 159, 138)\"\r\n                : \"grey\";\r\n            return (\r\n              <div\r\n                className=\"recommendation\"\r\n                key={i}\r\n                style={{ background: color }}\r\n              >\r\n                <p>Data: {recommendation.date} </p>\r\n                <p>Lekarz: {recommendation.doctor} </p>\r\n                <p>Treść: {recommendation.content}</p>\r\n                <p>\r\n                  Załączone dokumenty:{\" \"}\r\n                  {recommendation.attachedDocuments.map((attachment, i) => (\r\n                    <Link\r\n                      key={i}\r\n                      style={{\r\n                        margin: \"10px\",\r\n                        color: \"white\",\r\n                        textDecoration: \"underline\"\r\n                      }}\r\n                      to={`/recommendations/attached-document-:${\r\n                        attachment.id\r\n                      }`}\r\n                    >\r\n                      {attachment.title}\r\n                    </Link>\r\n                  ))}\r\n                </p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Recommendations;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/SideBar.css\";\r\n\r\nclass SideBar extends Component {\r\n  state = {\r\n    patient: [],\r\n    tasks: [],\r\n    editMode: false\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await fetch(\"https://medical-documentation.herokuapp.com/patient\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ patient: data }));\r\n  }\r\n\r\n  editData = async e => {\r\n    if (!this.state.editMode) {\r\n      this.setState({ editMode: true });\r\n    } else {\r\n      //sent to db\r\n      await fetch(\r\n        \"https://medical-documentation.herokuapp.com/edit-patient-data\",\r\n        {\r\n          method: \"put\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            name: document.querySelector(\"#name\").value,\r\n            sex: document.querySelector(\"#sex\").value,\r\n            PESEL: document.querySelector(\"#PESEL\").value,\r\n            telephone: document.querySelector(\"#telephone\").value,\r\n            address: document.querySelector(\"#address\").value,\r\n            icd10: document.querySelector(\"#icd10\").value\r\n          })\r\n        }\r\n      )\r\n        .then(result => result.json())\r\n        .then(data => this.setState({ patient: data }));\r\n      this.setState({ editMode: false });\r\n    }\r\n  };\r\n\r\n  expandPatientInfo = e => {\r\n    console.log(\"CLick\");\r\n    document.querySelector(\".mobile-out.patient\").classList.toggle(\"active\");\r\n    e.target.classList.toggle(\"active\");\r\n  };\r\n\r\n  expandTasks = e => {\r\n    document.querySelector(\".mobile-out.tasks\").classList.toggle(\"active\");\r\n    e.target.classList.toggle(\"active\");\r\n  };\r\n\r\n  render() {\r\n    const patient = this.state.patient;\r\n    const name = `${patient.name} ${patient.surname}`;\r\n    return (\r\n      <div className=\"side-bar\">\r\n        <div className=\"patient-info\">\r\n          <p className=\"mobile-info\">Pacjent: {name}</p>\r\n          <h3 className=\"expandable\" onClick={this.expandPatientInfo}>\r\n            Dane osobowe\r\n          </h3>\r\n          <div className=\"mobile-out patient\">\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <td>Imię i nazwisko: </td>\r\n                  <td>\r\n                    {this.state.editMode ? (\r\n                      <input type=\"text\" defaultValue={name} id=\"name\" />\r\n                    ) : (\r\n                      <p>{name}</p>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Płeć: </td>\r\n                  <td>\r\n                    {this.state.editMode ? (\r\n                      <input type=\"text\" defaultValue={patient.sex} id=\"sex\" />\r\n                    ) : (\r\n                      <p>{patient.sex}</p>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Wiek: </td>\r\n                  <td> {patient.age} </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>PESEL: </td>\r\n                  <td>\r\n                    {\" \"}\r\n                    {this.state.editMode ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        defaultValue={patient.PESEL}\r\n                        id=\"PESEL\"\r\n                      />\r\n                    ) : (\r\n                      <p>{patient.PESEL}</p>\r\n                    )}{\" \"}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Data urodzenia: </td>\r\n                  <td> {patient.dateOfBirth} </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Adres: </td>\r\n                  <td>\r\n                    {this.state.editMode ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        defaultValue={patient.address}\r\n                        id=\"address\"\r\n                      />\r\n                    ) : (\r\n                      <p>{patient.address}</p>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Telefon: </td>\r\n                  <td>\r\n                    {\" \"}\r\n                    {this.state.editMode ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        defaultValue={patient.telephone}\r\n                        id=\"telephone\"\r\n                      />\r\n                    ) : (\r\n                      <p>{patient.telephone}</p>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>ICD10: </td>\r\n                  <td>\r\n                    {\" \"}\r\n                    {this.state.editMode ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        defaultValue={patient.icd10}\r\n                        id=\"icd10\"\r\n                      />\r\n                    ) : (\r\n                      <p>{patient.icd10}</p>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n            {this.props.activeAccount === \"doctor\" && (\r\n              <button onClick={this.editData}>\r\n                {this.state.editMode ? \"Zapisz\" : \"Edytuj\"}\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"todo-list\">\r\n          <h3 className=\"expandable\" onClick={this.expandTasks}>\r\n            Zadania do wykonania\r\n          </h3>\r\n          <div className=\"mobile-out tasks\">\r\n            <ul>\r\n              {this.props.tasks.map((task, i) => {\r\n                return (\r\n                  <li key={i}>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={task.completed}\r\n                      onChange={this.props.toggleComplete}\r\n                      id={task._id}\r\n                      disabled={this.props.activeAccount !== \"doctor\"}\r\n                    />{\" \"}\r\n                    {task.title}\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n            {this.props.activeAccount === \"doctor\" && (\r\n              <form onSubmit={this.props.addTask}>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Wpisz nowe zadanie\"\r\n                  name=\"title\"\r\n                />\r\n                <input type=\"submit\" value=\"Dodaj\" />\r\n              </form>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideBar;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../css/Report.css\";\r\n\r\nclass Raport extends Component {\r\n  state = {\r\n    parameters: [],\r\n    chosenParameter: \"\",\r\n    documents: [],\r\n    filteredResults: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://medical-documentation.herokuapp.com/lab-data\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ parameters: data }));\r\n\r\n    fetch(\"https://medical-documentation.herokuapp.com/documentation\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ documents: data.sort(this.compare) }));\r\n  }\r\n\r\n  chooseResultType = async e => {\r\n    let filteredResults;\r\n\r\n    filteredResults = this.state.documents\r\n      .filter(document => document.title.includes(\"Badanie krwi\"))\r\n      .filter(labResult =>\r\n        labResult.results.some(result => result.name === e.target.value)\r\n      );\r\n    await this.setState({ chosenParameter: e.target.value, filteredResults });\r\n  };\r\n\r\n  compare = (a, b) => {\r\n    const dateA = parseInt(\r\n      a.testDate\r\n        .split(\" \")[0]\r\n        .split(\"-\")\r\n        .join(\"\")\r\n    );\r\n    const dateB = parseInt(\r\n      b.testDate\r\n        .split(\" \")[0]\r\n        .split(\"-\")\r\n        .join(\"\")\r\n    );\r\n    return dateA > dateB ? -1 : dateA < dateB ? 1 : 0;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container \">\r\n        <Link to=\"/documentation\" className=\"backButton\">\r\n          <button>Powrót</button>\r\n        </Link>\r\n        <h2>Raport z badań laboratoryjnych</h2>\r\n        <div className=\"report-content\">\r\n          <label>\r\n            Wybierz parametr do porównania\r\n            <select\r\n              name=\"parameters\"\r\n              onChange={this.chooseResultType}\r\n              defaultValue=\"default\"\r\n            >\r\n              <option value=\"default\" disabled={true}>\r\n                Parametr\r\n              </option>\r\n              {this.state.parameters.map((parameter, i) => (\r\n                <option key={i} value={parameter.name}>\r\n                  {parameter.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n          {this.state.filteredResults.length > 0 && (\r\n            <div>\r\n              <p className=\"mobile-info\">\r\n                Zakres:{\" \"}\r\n                {\r\n                  this.state.parameters.find(\r\n                    item => item.name === this.state.chosenParameter\r\n                  ).range\r\n                }{\" \"}\r\n                {\r\n                  this.state.parameters.find(\r\n                    item => item.name === this.state.chosenParameter\r\n                  ).unit\r\n                }\r\n              </p>\r\n              <table border=\"1\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Data</th>\r\n                    <th>Wartość {this.state.chosenParameter}</th>\r\n                    {/*<th>Zakres</th>\r\n                    <th>Jednostka</th>*/}\r\n                    <th>Lekarz zlecający</th>\r\n                    <th>Laborant</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.state.filteredResults.map((result, i) => {\r\n                    return (\r\n                      <tr key={i}>\r\n                        <td>{result.testDate} </td>\r\n                        <td>\r\n                          {\r\n                            result.results.find(\r\n                              item => item.name === this.state.chosenParameter\r\n                            ).value\r\n                          }\r\n                        </td>\r\n                        {/*<td>{ result.results.find(item => item.name === this.state.chosenParameter).range }</td>\r\n                        <td>{ result.results.find(item => item.name === this.state.chosenParameter).unit }</td>*/}\r\n                        <td>{result.orderingDoctor}</td>\r\n                        <td>{result.labTechnician}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n              <button>Zapisz do PDF</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Raport;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter, Route, NavLink, Switch, Redirect } from \"react-router-dom\";\r\nimport Document from \"./Document\";\r\nimport MedicalProcess from \"./MedicalProcess\";\r\nimport Documentation from \"./Documentation\";\r\nimport Recommendations from \"./Recommendations\";\r\nimport SideBar from \"./SideBar\";\r\nimport \"../css/PatientDoctorPage.css\";\r\nimport Report from \"./Report\";\r\n\r\nclass PatientPage extends Component {\r\n  state = {\r\n    patientID: \"\",\r\n    tasks: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://medical-documentation.herokuapp.com/medical-process\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ tasks: data }));\r\n  }\r\n\r\n  editTask = async id => {\r\n    await fetch(\"https://medical-documentation.herokuapp.com/edit-task\", {\r\n      method: \"put\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        title: document.querySelector(\"#title\").value,\r\n        details: document.querySelector(\"#details\").value,\r\n        date: document.querySelector(\"#date\").value,\r\n        id: id\r\n      })\r\n    })\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ tasks: data }));\r\n  };\r\n\r\n  toggleComplete = e => {\r\n    const id = e.target.id;\r\n    let isCompleted = \"\";\r\n    this.setState({\r\n      tasks: this.state.tasks.map((task, i) => {\r\n        if (task._id === id) {\r\n          task.completed = !task.completed;\r\n          isCompleted = task.completed;\r\n        }\r\n        return task;\r\n      })\r\n    });\r\n    //dodanie do bazy\r\n    fetch(\"https://medical-documentation.herokuapp.com/complete-task\", {\r\n      method: \"put\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ id: id, completed: isCompleted })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ tasks: data }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SideBar tasks={this.state.tasks} />\r\n\r\n        <HashRouter>\r\n          <nav>\r\n            <NavLink to=\"/documentation\" activeClassName=\"active\">\r\n              Dokumentacja\r\n            </NavLink>\r\n            <NavLink to=\"/recommendations\" activeClassName=\"active\">\r\n              Zalecenia lekarskie\r\n            </NavLink>\r\n            <NavLink to=\"/medical-process\" activeClassName=\"active\">\r\n              Proces medyczny\r\n            </NavLink>\r\n          </nav>\r\n          <Switch>\r\n            <Route exact path=\"/documentation\" component={Documentation} />\r\n            <Route exact path=\"/recommendations\" component={Recommendations} />\r\n            <Route\r\n              path=\"/medical-process\"\r\n              render={props => (\r\n                <MedicalProcess\r\n                  {...props}\r\n                  tasks={this.state.tasks}\r\n                  editTask={this.editTask}\r\n                />\r\n              )}\r\n            />\r\n            <Route exact path=\"/documentation/report\" component={Report} />}\r\n            <Route\r\n              exact\r\n              path=\"/documentation/document:documentId\"\r\n              component={Document}\r\n            />\r\n            <Redirect from=\"/\" to=\"/documentation\" />\r\n          </Switch>\r\n        </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PatientPage;\r\n","const transformDateTime = date => {\r\n  const day = `${\r\n    date.getDate().toString().length === 1 ? \"0\" : \"\"\r\n  }${date.getDate()}`;\r\n  const month = `${\r\n    date.getMonth().toString().length === 1 ? \"0\" : \"\"\r\n  }${date.getMonth()+1}`;\r\n  const year = date.getYear() - 100;\r\n  const hour = `${\r\n    date.getHours().toString().length === 1 ? \"0\" : \"\"\r\n  }${date.getHours()}`;\r\n  const minutes = `${\r\n    date.getMinutes().toString().length === 1 ? \"0\" : \"\"\r\n  }${date.getMinutes()}`;\r\n\r\n  return `20${year}-${month}-${day} ${hour}:${minutes}`;\r\n};\r\n\r\nconst transformDate = date => {\r\n  const day = `${\r\n    date.getDate().toString().length === 1 ? \"0\" : \"\"\r\n  }${date.getDate()}`;\r\n  const month = `${\r\n    date.getMonth().toString().length === 1 ? \"0\" : \"\"\r\n  }${date.getMonth()+1}`;\r\n  const year = date.getYear() - 100;\r\n  return `20${year}-${month}-${day}`;\r\n};\r\n\r\n/* const transformFromDB = date => {\r\n  if (date !== null) {\r\n    const dateTime = date.split(\"T\");\r\n    const time = dateTime[1].slice(0, 5);\r\n    return `${dateTime[0]} ${time}`\r\n    \r\n  }\r\n\r\n}; */\r\n\r\n/* const sort = (a, b) => {\r\n  a.date = a.date.split('-').join('');\r\n  b.date = b.date.split('-').join('');\r\n  return a.date > b.date ? 1 : a.date < b.date ? -1 : 0;\r\n}\r\n */\r\nconst today = transformDate(new Date());\r\nconst threeDaysAgo = transformDate(new Date(Date.now() - 3 * 24 * 3600 * 1000));\r\nconst now = transformDateTime(new Date());\r\n\r\nexport { today, threeDaysAgo, now, transformDate, transformDateTime };\r\n","import React, { Component } from \"react\";\r\nimport \"../../css/NewDocument.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { today, threeDaysAgo } from \"../../DateParser\";\r\nclass NewDocument extends Component {\r\n  state = {\r\n    documentType: \"\"\r\n  };\r\n\r\n  chooseDocumentType = e => {\r\n    this.setState({ documentType: e.target.value });\r\n  };\r\n\r\n  createDocument = e => {\r\n    //console.log(e.target);\r\n    e.preventDefault();\r\n    const title = `${this.state.documentType}: ${\r\n      e.target.region ? e.target.region.value : \"\"\r\n    }  ${e.target.testDate.value.split(\"T\")[0]}`;\r\n    //console.log(title);\r\n    fetch(\"https://medical-documentation.herokuapp.com/new-document\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        documentType: this.state.documentType,\r\n        title,\r\n        testDate: e.target.testDate.value.split(\"T\").join(\" \"),\r\n\r\n        orderingDoctor: e.target.orderingDoctor.value,\r\n        performingDoctor: e.target.performingDoctor.value,\r\n        content: e.target.content.value\r\n      })\r\n    });\r\n\r\n    this.props.history.push(\"/documentation\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h2 style={{ textAlign: \"center\" }}>Nowy dokument</h2>\r\n        <Link\r\n          to=\"/documentation\"\r\n          className=\"backButton\"\r\n         \r\n        >\r\n          <button>Powrót</button>\r\n        </Link>\r\n        <div className=\"new-document\">\r\n        \r\n          <label style={{ width: \"70%\", margin: \"auto\" }}>\r\n            Typ dokumentu:\r\n            <select\r\n              name=\"documentType\"\r\n              onChange={this.chooseDocumentType}\r\n              defaultValue=\"default\"\r\n            >\r\n              <option value=\"default\" disabled>\r\n                Wybierz typ\r\n              </option>\r\n              <option value=\"Badanie USG\">Badanie USG</option>\r\n\r\n              <option value=\"Badanie EKG\">Badanie EKG</option>\r\n              <option value=\"Echokardiografia\">Echokardiografia</option>\r\n              <option value=\"Tomografia komputerowa\">\r\n                Tomografia komputerowa\r\n              </option>\r\n              <option value=\"Rezonans magnetyczny\">Rezonans magnetyczny</option>\r\n              <option value=\"Angiografia\">Angiografia / Koronarografia</option>\r\n            </select>\r\n          </label>\r\n\r\n          {this.state.documentType && (\r\n            <form className=\"document-form\" onSubmit={this.createDocument}>\r\n              {(this.state.documentType === \"Rezonans magnetyczny\" ||\r\n                this.state.documentType === \"Tomografia komputerowa\") && (\r\n                <label>\r\n                  {\" \"}\r\n                  Badany obszar: <input type=\"text\" name=\"region\" required />\r\n                </label>\r\n              )}\r\n\r\n              <label>\r\n                {\" \"}\r\n                Data badania:{\" \"}\r\n                <input\r\n                  type=\"datetime-local\"\r\n                  name=\"testDate\"\r\n                  min={threeDaysAgo}\r\n                  max={today}\r\n                  defaultValue={today}\r\n                  required\r\n                />\r\n              </label>\r\n\r\n              <label>\r\n                {\" \"}\r\n                Lekarz zlecający:{\" \"}\r\n                <input type=\"text\" name=\"orderingDoctor\" required />\r\n              </label>\r\n\r\n              <label>\r\n                {\" \"}\r\n                Lekarz wykonujący:{\" \"}\r\n                <input type=\"text\" name=\"performingDoctor\" required />\r\n              </label>\r\n              <label>\r\n                {\" \"}\r\n                Treść: <textarea required name=\"content\" />\r\n              </label>\r\n              <label>\r\n                {\" \"}\r\n                Załączniki: <input type=\"file\" multiple=\"multiple\" />\r\n              </label>\r\n\r\n              <input type=\"submit\" value=\"Dodaj dokument\" />\r\n            </form>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewDocument;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { today, threeDaysAgo } from \"../../DateParser\";\r\nimport \"../../css/NewRecommendation.css\";\r\n\r\nclass NewRecommendation extends Component {\r\n  state = {\r\n    dataSaved: JSON.parse(sessionStorage.getItem(\"saved\")),\r\n    data: JSON.parse(sessionStorage.getItem(\"recommendationData\")) || {},\r\n    attachments: JSON.parse(sessionStorage.getItem(\"attachments\")) || []\r\n  };\r\n\r\n  toggleSave = async e => {\r\n    e.preventDefault();\r\n\r\n    const { date, content } = e.target.parentElement;\r\n    if (!this.state.dataSaved) {\r\n      await this.setState({\r\n        dataSaved: true,\r\n        data: {\r\n          content: content.value,\r\n          date: date.value\r\n        }\r\n      });\r\n    } else {\r\n      await this.setState({\r\n        dataSaved: false,\r\n        data: {\r\n          content: \"\",\r\n          date: \"\"\r\n        }\r\n      });\r\n    }\r\n    await sessionStorage.setItem(\r\n      \"recommendationData\",\r\n      JSON.stringify(this.state.data)\r\n    );\r\n    await sessionStorage.setItem(\"saved\", JSON.stringify(this.state.dataSaved));\r\n  };\r\n\r\n  submitRecommendation = () => {\r\n    fetch(\"https://medical-documentation.herokuapp.com/new-recommendation\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        date: document.getElementById(\"date\").value,\r\n        content: document.getElementById(\"content\").value,\r\n        attachments: this.state.attachments\r\n      })\r\n    });\r\n    sessionStorage.removeItem(\"saved\");\r\n    sessionStorage.removeItem(\"recommendationData\");\r\n    sessionStorage.removeItem(\"attachments\");\r\n    this.props.history.push(\"/recommendations\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container form-container\">\r\n        <h2>Nowe zalecenie</h2>\r\n        <Link to=\"/recommendations\" className=\"backButton\">\r\n          <button>Powrót</button>\r\n        </Link>\r\n        <form>\r\n          <label>\r\n            Data:\r\n            <input\r\n              type=\"date\"\r\n              disabled={this.state.dataSaved}\r\n              name=\"date\"\r\n              id=\"date\"\r\n              min={threeDaysAgo}\r\n              max={today}\r\n              defaultValue={this.state.data.date || today}\r\n            />\r\n          </label>\r\n          <label>\r\n            Treść:{\" \"}\r\n            <textarea\r\n              id=\"content\"\r\n              disabled={this.state.dataSaved}\r\n              name=\"content\"\r\n              defaultValue={this.state.data.content || \"\"}\r\n            />\r\n          </label>\r\n\r\n          <input\r\n            type=\"submit\"\r\n            value={this.state.dataSaved ? \"Edytuj\" : \"Zapisz\"}\r\n            onClick={this.toggleSave}\r\n          />\r\n        </form>\r\n        {this.state.attachments && (\r\n          <p className=\"attachments-info\">\r\n            Załączniki:\r\n            {this.state.attachments.map((attachment, i) => {\r\n              return (\r\n                <Link\r\n                  key={i}\r\n                  className=\"attachments\"\r\n                  to=\"/recommendations/attachments/:document\"\r\n                >\r\n                  {attachment.title}\r\n                </Link>\r\n              );\r\n            })}\r\n          </p>\r\n        )}\r\n        <p className=\"attachments-choice\">\r\n          Wygeneruj załącznik:{\" \"}\r\n          <div className=\"attachment-links\">\r\n            <Link to=\"/recommendations/create-new/generate-prescription\">\r\n              <button className=\"attachment-button\">Recepta</button>\r\n            </Link>\r\n            <Link to=\"/recommendations/create-new/generate-sickleave\">\r\n              <button className=\"attachment-button\">Zwolnienie</button>\r\n            </Link>\r\n            <Link to=\"/recommendations/create-new/generate-referral\">\r\n              <button className=\"attachment-button\">Skierowanie</button>\r\n            </Link>\r\n            <Link to=\"/recommendations/create-new/generate-lab-order\">\r\n              <button className=\"attachment-button\">Zlecenie badania</button>\r\n            </Link>\r\n          </div>\r\n        </p>\r\n        <button className=\"submit-button\" onClick={this.submitRecommendation}>\r\n          Dodaj zalecenie\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewRecommendation;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../css/NewAttachment.css\";\r\nimport { today, threeDaysAgo } from \"../../DateParser\";\r\n\r\nclass NewAttachment extends Component {\r\n  submitAttachment = async e => {\r\n    e.preventDefault();\r\n\r\n    let attachedDocument = {};\r\n    const { date, startDate } = e.target;\r\n    switch (this.props.documentType) {\r\n      case \"prescription\":\r\n        const { medicine, payment } = e.target;\r\n        attachedDocument = {\r\n          title: `Recepta ${medicine.value}`,\r\n          medicine: medicine.value,\r\n          payment: payment.value,\r\n          issueDate: date.value,\r\n          startDate: startDate.value,\r\n          type: \"recepta\",\r\n\r\n        };\r\n        break;\r\n      case \"sickleave\":\r\n        const { placeOfWork, endDate } = e.target;\r\n        attachedDocument = {\r\n          title: `Zwolnienie ${startDate.value}-${endDate.value}`,\r\n          issueDate: date.value,\r\n          placeOfWork: placeOfWork.value,\r\n          startDate: startDate.value,\r\n          endDate: endDate.value,\r\n          type: \"zwolnienie\",\r\n\r\n        };\r\n        break;\r\n\r\n      case \"referral\":\r\n        const { place, examination, diagnosis, aim } = e.target;\r\n        attachedDocument = {\r\n          title: `Skierowanie do ${place.value}`,\r\n          issueDate: date.value,\r\n          place: place.value,\r\n          examination: examination.value,\r\n          diagnosis: diagnosis.value,\r\n          aim: aim.value,\r\n          type: \"skierowanie\",\r\n\r\n        };\r\n        break;\r\n      case \"lab-order\":\r\n        const checkboxes = [...e.target.test];\r\n        const labTests = checkboxes\r\n          .filter(checkbox => checkbox.checked === true)\r\n          .map(checkbox => checkbox.value);\r\n\r\n        console.log(labTests);\r\n        attachedDocument = {\r\n          title: `Zlecenie badań laboratoryjnych ${date.value}`,\r\n          labTests: labTests,\r\n          type: \"zlecenie badań\",\r\n\r\n          };\r\n         break;\r\n        default:\r\n        return;\r\n    }\r\n\r\n    await fetch(\"https://medical-documentation.herokuapp.com/attach-document\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(attachedDocument)\r\n    })\r\n     .then(result => result.json())\r\n      .then(data => attachedDocument.id = data);\r\n    console.log(attachedDocument.id);\r\n    let attachments = JSON.parse(sessionStorage.getItem(\"attachments\")) || [];\r\n    attachments.push(attachedDocument);\r\n    sessionStorage.setItem(\"attachments\", JSON.stringify(attachments));\r\n    this.props.history.push(\"/recommendations/create-new\");\r\n  };\r\n\r\n  render() {\r\n    const documentType = this.props.documentType;\r\n    return (\r\n      <div className=\"container\">\r\n        <Link to=\"/recommendations/create-new\" className=\"backButton\">\r\n          <button>Powrót</button>\r\n        </Link>\r\n        {documentType === \"prescription\" && (\r\n          <div>\r\n            <h2>Nowa recepta</h2>\r\n            <form className=\"attachment-form\" onSubmit={this.submitAttachment}>\r\n              <label>\r\n                Data:\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  min={threeDaysAgo}\r\n                  max={today}\r\n                  defaultValue={today}\r\n                />\r\n              </label>\r\n              <label>\r\n                Informacje o leku:{\" \"}\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Nazwa, ilość, dawkowanie\"\r\n                  name=\"medicine\"\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                Odpłatność: <input type=\"text\" name=\"payment\" required />\r\n              </label>\r\n              <label>\r\n                Data od dnia: <input type=\"date\" name=\"startDate\" />\r\n              </label>\r\n              <input type=\"submit\" value=\"Dodaj\" />\r\n            </form>\r\n          </div>\r\n        )}\r\n\r\n        {documentType === \"sickleave\" && (\r\n          <div>\r\n            <h2>Nowe zwolnienie lekarskie</h2>\r\n            <form className=\"attachment-form\" onSubmit={this.submitAttachment}>\r\n              <label>\r\n                Data:\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  min={threeDaysAgo}\r\n                  max={today}\r\n                  defaultValue={today}\r\n                />\r\n              </label>\r\n              <label>\r\n                Miejsce pracy: <input type=\"text\" name=\"placeOfWork\" required />\r\n              </label>\r\n              <label>\r\n                od:{\" \"}\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"startDate\"\r\n                  min={threeDaysAgo}\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                do: <input type=\"date\" name=\"endDate\" required />\r\n              </label>\r\n              <input type=\"submit\" value=\"Dodaj\" />\r\n            </form>\r\n          </div>\r\n        )}\r\n\r\n        {documentType === \"referral\" && (\r\n          <div>\r\n            <h2>Nowe skierowanie</h2>\r\n            <form className=\"attachment-form\" onSubmit={this.submitAttachment}>\r\n              <label>\r\n                Data:\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  min={threeDaysAgo}\r\n                  max={today}\r\n                  defaultValue={today}\r\n                />\r\n              </label>\r\n              <label>\r\n                Skierowanie do:{\" \"}\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"place\"\r\n                  placeholder=\"poradni specjalistycznej, pracowni diagnostycznej\"\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                Badanie:{\" \"}\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"examination\"\r\n                  placeholder=\"konsultacja, badanie USG\"\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                Rozpoznanie: <input type=\"text\" name=\"diagnosis\" required />\r\n              </label>\r\n              <label>\r\n                Cel: <input type=\"text\" name=\"aim\" required />\r\n              </label>\r\n              <input type=\"submit\" value=\"Dodaj\" />\r\n            </form>\r\n          </div>\r\n        )}\r\n\r\n        {documentType === \"lab-order\" && (\r\n          <div>\r\n            <h2>Nowe zlecenie na badanie</h2>\r\n            <form className=\"lab-order-form\" onSubmit={this.submitAttachment}>\r\n              <label>\r\n                Data:\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  min={threeDaysAgo}\r\n                  max={today}\r\n                  defaultValue={today}\r\n                />\r\n              </label>\r\n              <div className=\"tests\">\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"OB\" />\r\n                  OB\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"Glukoza\" />\r\n                  Glukoza\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"LDL\" />\r\n                  LDL\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"HDL\" />\r\n                  HDL\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"TG\" />\r\n                  Trójglicerydy\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"Morfologia\" />\r\n                  Morfologia\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"Magnez\" />\r\n                  Magnez\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"Sód\" />\r\n                  Sód\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"Potas\" />\r\n                  Potas\r\n                </label>\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"test\" value=\"Żelazo\" />\r\n                  Żelazo\r\n                </label>\r\n              </div>\r\n\r\n              <input type=\"submit\" value=\"Dodaj\" />\r\n            </form>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewAttachment;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter, Route, NavLink, Switch, Redirect } from \"react-router-dom\";\r\nimport Recommendations from \"../Recommendations\";\r\nimport MedicalProcess from \"../MedicalProcess\";\r\nimport Documentation from \"../Documentation\";\r\nimport NewDocument from \"./NewDocument\";\r\nimport Document from \"../Document\";\r\nimport Report from \"../Report\";\r\nimport SideBar from \"../SideBar\";\r\nimport \"../../css/PatientDoctorPage.css\";\r\nimport NewRecommendation from \"./NewRecommendation\";\r\nimport NewAttachment from \"./NewAttachment\";\r\n\r\nclass DoctorPage extends Component {\r\n  state = {\r\n    patientID: \"\",\r\n    tasks: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://medical-documentation.herokuapp.com/medical-process\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ tasks: data }));\r\n  }\r\n  //MEDICAL PROCESS\r\n  addTask = async e => {\r\n    e.preventDefault();\r\n    const completed = e.target.completed.value === \"done\" ? true : false;\r\n\r\n    fetch(\"https://medical-documentation.herokuapp.com/new-task\", {\r\n      method: \"post\",\r\n      mode: \"cors\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      },\r\n      body: JSON.stringify({\r\n        title: e.target.title.value,\r\n        date: e.target.date.value.split(\"T\").join(\" \"),\r\n        completed,\r\n        details: e.target.details.value\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ tasks: data }));\r\n\r\n    e.target.title.value = \"\";\r\n    e.target.details.value = \"\";\r\n    e.target.date.value = \"\";\r\n  };\r\n\r\n  //SIDE BAR\r\n  addTaskFromSideBar = e => {\r\n    e.preventDefault();\r\n\r\n    fetch(\"https://medical-documentation.herokuapp.com/new-task\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        title: e.target.title.value,\r\n        date: \"\",\r\n        completed: false,\r\n        details: \"\"\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ tasks: data }));\r\n\r\n    e.target.title.value = \"\";\r\n  };\r\n\r\n  editTask = async id => {\r\n    await fetch(\"https://medical-documentation.herokuapp.com/edit-task\", {\r\n      method: \"put\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        title: document.querySelector(\"#title\").value,\r\n        details: document.querySelector(\"#details\").value,\r\n        date: document.querySelector(\"#date\").value,\r\n        id: id\r\n      })\r\n    })\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ tasks: data }));\r\n  };\r\n\r\n  setCompleted = e => {\r\n    //console.log(e.target.id);\r\n    const id = e.target.id;\r\n    this.setState({\r\n      tasks: this.state.tasks.map((task, i) => {\r\n        if (task._id === id) {\r\n          task.completed = true;\r\n        }\r\n        return task;\r\n      })\r\n    });\r\n\r\n    fetch(\"https://medical-documentation.herokuapp.com/complete-task\", {\r\n      method: \"put\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ id: id, completed: true })\r\n    });\r\n  };\r\n\r\n  toggleComplete = async e => {\r\n    const id = e.target.id;\r\n    let isCompleted = \"\";\r\n    this.setState({\r\n      tasks: this.state.tasks.map((task, i) => {\r\n        if (task._id === id) {\r\n          task.completed = !task.completed;\r\n          isCompleted = task.completed;\r\n        }\r\n        return task;\r\n      })\r\n    });\r\n    //dodanie do bazy\r\n    await fetch(\"https://medical-documentation.herokuapp.com/complete-task\", {\r\n      method: \"put\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ id: id, completed: isCompleted })\r\n    });\r\n    /* .then(response => response.json())\r\n      .then(data => this.setState({ tasks: data })); */\r\n  };\r\n\r\n  searchPatient = async e => {\r\n    e.preventDefault();\r\n    /* e.target.patientID.setCustomValidity(\r\n      \"Wprowadź poprawne 5-cyfrowe ID pacjenta\"\r\n    ); */\r\n    let patientID;\r\n    if (!this.state.patientID) {\r\n      e.preventDefault();\r\n      patientID = e.target.patientID.value;\r\n      await fetch(\r\n        \"https://medical-documentation.herokuapp.com/get-patient-data\",\r\n        {\r\n          method: \"put\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ patientID })\r\n        }\r\n      )\r\n        .then(response => response.json())\r\n        .then(data => this.setState({ patientID: data }));\r\n\r\n      await fetch(\"https://medical-documentation.herokuapp.com/medical-process\")\r\n        .then(result => result.json())\r\n        .then(data => {\r\n          this.setState({ tasks: data });\r\n        });\r\n    } else {\r\n      this.setState({ patientID: \"\" });\r\n      e.target.patientID.value = \"\";\r\n      fetch(\"https://medical-documentation.herokuapp.com/get-patient-data\", {\r\n        method: \"put\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ patientID: \"\" })\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form className=\"ID-form\" onSubmit={this.searchPatient}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Wpisz ID pacjenta\"\r\n            name=\"patientID\"\r\n            pattern=\"[0-9]{5}\"\r\n          />\r\n\r\n          <input\r\n            type=\"submit\"\r\n            value={this.state.patientID ? \"Zmień pacienta\" : \"Znajdź pacjenta\"}\r\n          />\r\n        </form>\r\n\r\n        {this.state.patientID && (\r\n          <div>\r\n            <SideBar\r\n              activeAccount=\"doctor\"\r\n              patient={this.state.patientID}\r\n              tasks={this.state.tasks}\r\n              addTask={this.addTaskFromSideBar}\r\n              toggleComplete={this.toggleComplete}\r\n            />\r\n            <HashRouter>\r\n              <nav>\r\n                <NavLink to=\"/documentation\" activeClassName=\"active\">\r\n                  Dokumentacja\r\n                </NavLink>\r\n                <NavLink to=\"/recommendations\" activeClassName=\"active\">\r\n                  Zalecenia lekarskie\r\n                </NavLink>\r\n                <NavLink to=\"/medical-process\" activeClassName=\"active\">\r\n                  Proces medyczny\r\n                </NavLink>\r\n              </nav>\r\n              <Switch>\r\n                <Route\r\n                  exact\r\n                  path=\"/recommendations/create-new/generate-prescription\"\r\n                  render={props => (\r\n                    <NewAttachment {...props} documentType=\"prescription\" />\r\n                  )}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/recommendations/create-new/generate-sickleave\"\r\n                  render={props => (\r\n                    <NewAttachment {...props} documentType=\"sickleave\" />\r\n                  )}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/recommendations/create-new/generate-referral\"\r\n                  render={props => (\r\n                    <NewAttachment {...props} documentType=\"referral\" />\r\n                  )}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/recommendations/create-new/generate-lab-order\"\r\n                  render={props => (\r\n                    <NewAttachment {...props} documentType=\"lab-order\" />\r\n                  )}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/documentation/document:documentId\"\r\n                  component={Document}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/recommendations/create-new\"\r\n                  component={NewRecommendation}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/documentation/create-new\"\r\n                  component={NewDocument}\r\n                />\r\n                <Route exact path=\"/documentation/report\" component={Report} />}\r\n                />\r\n                <Route\r\n                  path=\"/documentation\"\r\n                  render={props => (\r\n                    <Documentation {...props} activeAccount=\"doctor\" />\r\n                  )}\r\n                />\r\n                <Route\r\n                  path=\"/recommendations\"\r\n                  render={props => (\r\n                    <Recommendations {...props} activeAccount=\"doctor\" />\r\n                  )}\r\n                />\r\n                <Route\r\n                  path=\"/medical-process\"\r\n                  render={props => (\r\n                    <MedicalProcess\r\n                      {...props}\r\n                      activeAccount=\"doctor\"\r\n                      tasks={this.state.tasks}\r\n                      addTask={this.addTask}\r\n                      setCompleted={this.setCompleted}\r\n                      editTask={this.editTask}\r\n                    />\r\n                  )}\r\n                />\r\n                <Redirect from=\"/\" to=\"/documentation\" />\r\n              </Switch>\r\n            </HashRouter>\r\n            <div />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DoctorPage;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/LabTechnicianPage.css\";\r\nimport { today } from \"../DateParser\";\r\n\r\nclass LabTechnicianPage extends Component {\r\n  state = {\r\n    resultType: \"\",\r\n    results: [],\r\n    parameters: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://medical-documentation.herokuapp.com/lab-data\")\r\n      .then(result => result.json())\r\n      .then(data => this.setState({ parameters: data }));\r\n  }\r\n\r\n  chooseResultType = e => {\r\n    console.log(e.target.value);\r\n    this.setState({ resultType: e.target.value });\r\n  };\r\n\r\n  addParameter = e => {\r\n    e.preventDefault();\r\n    let name = document.querySelector(\"#parameter\").value;\r\n    let value = document.querySelector(\"#result\").value;\r\n    let range = this.state.parameters.find(parameter => parameter.name === name)\r\n      .range;\r\n    let unit = this.state.parameters.find(parameter => parameter.name === name)\r\n      .unit;\r\n    if (value) {\r\n      const newParameter = {\r\n        name,\r\n        value,\r\n        type: this.state.resultType,\r\n        range,\r\n        unit\r\n      };\r\n      this.setState({ results: [...this.state.results, newParameter] });\r\n      document.querySelector(\"#result\").value = \"\";\r\n    }\r\n  };\r\n\r\n  submitResult = e => {\r\n    e.preventDefault();\r\n    const collectionDate = e.target.collectionDate.value.split(\"T\");\r\n    const title = `Badanie krwi ${collectionDate[0]}`;\r\n    const issueDate = today;\r\n\r\n    fetch(\"https://medical-documentation.herokuapp.com/lab-result\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        labPatientID: e.target.patientID.value,\r\n        orderingDoctor: e.target.orderingDoctor.value,\r\n        title,\r\n        testDate: collectionDate.join(\" \"),\r\n        issueDate,\r\n\r\n        results: this.state.results\r\n      })\r\n    });\r\n    this.setState({ resultType: \"\", results: [] });\r\n    window.location.reload();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container lab-container\">\r\n        <h2>Dodaj wynik badania krwi</h2>\r\n        <form className=\"form\" onSubmit={this.submitResult}>\r\n          <label htmlFor=\"patientID\" className=\"mainLabel\">\r\n            ID pacjenta{\" \"}\r\n            <input name=\"patientID\" type=\"text\" required pattern=\"[0-9]{5}\" />\r\n          </label>\r\n          <label htmlFor=\"orderingDoctor\" className=\"mainLabel\">\r\n            Lekarz zlecający{\" \"}\r\n            <input name=\"orderingDoctor\" type=\"text\" required />\r\n          </label>\r\n          <label htmlFor=\"collectionDate\" className=\"mainLabel\">\r\n            Data pobrania <input name=\"collectionDate\" type=\"datetime-local\" />\r\n          </label>\r\n\r\n          <label className=\"mainLabel\">\r\n            Typ badania\r\n            <select\r\n              name=\"result-type\"\r\n              onChange={this.chooseResultType}\r\n              defaultValue=\"default\"\r\n            >\r\n              <option value=\"default\" disabled={true}>\r\n                Wybierz typ badania\r\n              </option>\r\n              <option value=\"Morfologia\">Morfologia krwi</option>\r\n              <option value=\"Biochemia\">Biochemia krwi</option>\r\n              <option value=\"Immunochemia\">Immunochemia</option>\r\n              <option value=\"OB\">OB</option>\r\n            </select>\r\n          </label>\r\n\r\n          {this.state.resultType && (\r\n            <div className=\"result-display\">\r\n              <div className=\"inner-form\">\r\n                <label>\r\n                  Wybierz parametr\r\n                  {this.state.resultType === \"Morfologia\" && (\r\n                    <select name=\"parameter\" id=\"parameter\">\r\n                      {this.state.parameters\r\n                        .filter(\r\n                          parameter => parameter.testType === \"Morfologia\"\r\n                        )\r\n                        .map((parameter, i) => {\r\n                          return (\r\n                            <option key={i} value={parameter.name}>\r\n                              {parameter.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </select>\r\n                  )}\r\n                  {this.state.resultType === \"Biochemia\" && (\r\n                    <select name=\"parameter\" id=\"parameter\">\r\n                      {this.state.parameters\r\n                        .filter(parameter => parameter.testType === \"Biochemia\")\r\n                        .map((parameter, i) => {\r\n                          return (\r\n                            <option key={i} value={parameter.name}>\r\n                              {parameter.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </select>\r\n                  )}\r\n                  {this.state.resultType === \"Immunochemia\" && (\r\n                    <select name=\"parameter\" id=\"parameter\">\r\n                      {this.state.parameters\r\n                        .filter(\r\n                          parameter => parameter.testType === \"Immunochemia\"\r\n                        )\r\n                        .map((parameter, i) => {\r\n                          return (\r\n                            <option key={i} value={parameter.name}>\r\n                              {parameter.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </select>\r\n                  )}\r\n                  {this.state.resultType === \"OB\" && (\r\n                    <select name=\"parameter\" id=\"parameter\">\r\n                      <option value=\"OB\">OB</option>\r\n                    </select>\r\n                  )}\r\n                </label>\r\n                <label>\r\n                  Wartość\r\n                  <input type=\"text\" name=\"result\" id=\"result\" />\r\n                </label>\r\n                <input\r\n                  type=\"submit\"\r\n                  value=\"Dodaj parametr\"\r\n                  onClick={this.addParameter}\r\n                />\r\n              </div>\r\n\r\n              {this.state.results.length > 0 && (\r\n                <div className=\"table\">\r\n                  <table border=\"1\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th className=\"mobile-out\">Lp.</th>\r\n                        <th>Parametr</th>\r\n                        <th>Wartość</th>\r\n                        <th>Zakres</th>\r\n                        <th>Jednostka</th>\r\n                      </tr>\r\n                    </thead>\r\n                    {this.state.results.map((item, i) => {\r\n                      return (\r\n                        <tbody key={i}>\r\n                          <tr>\r\n                            <td className=\"mobile-out\">{i + 1}</td>\r\n                            <td>{this.state.results[i].name}</td>\r\n                            <td>{this.state.results[i].value}</td>\r\n                            <td>{this.state.results[i].range}</td>\r\n                            <td>{this.state.results[i].unit}</td>\r\n                          </tr>\r\n                        </tbody>\r\n                      );\r\n                    })}\r\n                  </table>\r\n                  <input type=\"submit\" value=\"Zapisz i prześlij\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabTechnicianPage;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PatientPage from \"./Patient-Doctor/PatientPage\";\r\nimport DoctorPage from \"./Patient-Doctor/Doctor/DoctorPage\";\r\nimport LabTechnicianPage from \"./LabTechnician/LabTechnicianPage\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    activeAccount: JSON.parse(sessionStorage.getItem(\"account\"))\r\n      ? JSON.parse(sessionStorage.getItem(\"account\"))\r\n      : \"\",\r\n    isLoggedIn: JSON.parse(sessionStorage.getItem(\"isLoggedIn\")) || \"false\", \r\n    activeUser:  []\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    //because setState is asynchronous\r\n    sessionStorage.setItem(\"isLoggedIn\", JSON.stringify(this.state.isLoggedIn));\r\n    sessionStorage.setItem(\"account\", JSON.stringify(this.state.activeAccount));\r\n    \r\n  }\r\n\r\n\r\n  changeAccount = e => {\r\n    this.setState({ activeAccount: e.target.value });\r\n  };\r\n\r\n  logIn = async e => {\r\n    e.preventDefault();\r\n    await fetch(\"https://medical-documentation.herokuapp.com/login\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        login: e.target.login.value,\r\n        password: e.target.password.value\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        if (data === \"FAIL\") {\r\n          document.querySelector(\"#login-info\").innerHTML =\r\n            \"Niepoprawny login i hasło\";\r\n        } else {\r\n          this.setState({\r\n            activeAccount: data.accountType,\r\n            isLoggedIn: \"true\",\r\n            activeUser: data\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  logOut = async () => {\r\n    this.setState({ activeAccount: \"\", isLoggedIn: \"false\" });\r\n    //await sessionStorage.setItem(\"isLoggedIn\", false);\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  render() {\r\n    let infoText;\r\n    if (sessionStorage.getItem(\"generatedLogin\")) {\r\n      infoText = `Twój wygenerowany login: ${sessionStorage.getItem(\r\n        \"generatedLogin\"\r\n      )}`;\r\n      sessionStorage.removeItem(\"generatedLogin\");\r\n    } else {\r\n      infoText = <br />;\r\n    }\r\n    return (\r\n      <div>\r\n        {this.state.isLoggedIn === \"false\" ? (\r\n          <div className=\"login-container\">\r\n            <h2>Zaloguj się</h2>\r\n            <p id=\"login-info\">{infoText}</p>\r\n            <form onSubmit={this.logIn}>\r\n              <label htmlFor=\"login\">Użytkownik: </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"login\"\r\n                pattern=\"[PDL]\\d{5}\"\r\n                placeholder=\"np. P12345, D12345, L12345\"\r\n                required\r\n              />\r\n              <label htmlFor=\"password\">Hasło: </label>\r\n              <input type=\"password\" name=\"password\" required />\r\n              <input type=\"submit\" value=\"Zaloguj\" />\r\n            </form>\r\n            <p>Nie masz konta?</p>\r\n            <Link to=\"/register\">\r\n              <button>Zarejestruj się</button>\r\n            </Link>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n          <header>\r\n            <div className=\"radio-buttons\">\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"account\"\r\n                  id=\"Patient\"\r\n                  value=\"patient\"\r\n                  checked={this.state.activeAccount === \"patient\"}\r\n                  onChange={this.changeAccount}\r\n                />{\" \"}\r\n                Pacjent\r\n              </label>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"account\"\r\n                  id=\"Doctor\"\r\n                  value=\"doctor\"\r\n                  checked={this.state.activeAccount === \"doctor\"}\r\n                  onChange={this.changeAccount}\r\n                />{\" \"}\r\n                Lekarz\r\n              </label>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"account\"\r\n                  id=\"Lab\"\r\n                  value=\"lab\"\r\n                  checked={this.state.activeAccount === \"lab\"}\r\n                  onChange={this.changeAccount}\r\n                />{\" \"}\r\n                Laborant\r\n              </label>\r\n            </div>\r\n\r\n            <button className=\"log-out\" onClick={this.logOut}>\r\n              Wyloguj się\r\n            </button>\r\n          </header>\r\n        \r\n          \r\n        \r\n            {this.state.activeAccount === \"patient\" ? (\r\n              <PatientPage />\r\n            ) : this.state.activeAccount === \"doctor\" ? (\r\n              <DoctorPage />\r\n            ) : (\r\n              <LabTechnicianPage />\r\n            )}\r\n            </div>\r\n\r\n            )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Register from \"./Register\";\r\n\r\nimport Main from \"./Main\";\r\n\r\nimport \"./css/App.css\";\r\n\r\nclass App extends Component {\r\n  async componentWillMount() {\r\n    if (!sessionStorage.getItem(\"account\")) {\r\n      console.log(\"no account\");\r\n      const text = \"\";\r\n      await sessionStorage.setItem(\"account\", JSON.stringify(text));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/\" component={Main} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n//basename - because of /dokumenty_cyfrowe_w_medycynie in url (gh-pages)\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}> \r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}